version: '2'

# sphinx, memcache na sesje, redis?

services:
  storage:
    image: busybox:latest
    container_name: project
    volumes:
      - ./:/srv

  varnish: # caching load-balancer
    image: eeacms/varnish # https://github.com/eea/eea.docker.varnish
    container_name: varnish
    ports:
      - 80:6081
    environment:
      - BACKENDS=nginx
    volumes:
      - ./varnish/config/varnish.vcl:/etc/varnish/conf.d/x-01-magento.vcl
      - ./varnish/config/magento.vcl:/etc/varnish/conf.d/x-02-magento.vcl
    labels:
      container_group: web
    depends_on:
      - nginx

  nginx:
    image: nginx
    container_name: nginx
    volumes_from:
      - storage
    volumes:
      - ./nginx/config/nginx-web.conf:/etc/nginx/conf.d/default.conf
    working_dir: /srv/www
    labels:
      container_group: web
    depends_on:
      - php

  php:
    build: ./php/docker
    container_name: php
    volumes_from:
      - storage
    volumes:
      - ./php/config/php.ini:/usr/local/etc/php/php.ini
    working_dir: /srv/www
    labels:
      container_group: web
    depends_on:
      - mysql
      - memcache

  mysql:
    image: mysql:latest
    container_name: mysql
    volumes:
      - ./mysql/data/:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=magento
      - MYSQL_ROOT_PASSWORD=root
    labels:
      container_group: storage

  sphinx: # full-text search
    build: ./sphinxsearch/docker
    container_name: sphinx
    ports:
      - 9099:8080
    volumes:
      - ./sphinxsearch/config/sphinx.conf:/etc/sphinxsearch/sphinx.conf
      - ./sphinxsearch/data:/usr/local/sphinxsearch/data
    labels:
      container_group: storage

  memcache: # session storage
    image: memcached
    container_name: memcache
    labels:
      container_group: storage

  mailcatcher: # smtp server from frontend
    build: ./mailcatcher/docker
    container_name: mailcatcher
    ports:
      - 8088:1080
    labels:
      container_group: mail

  cron:
    image: lodatol/cron
    container_name: cron
    environment:
      - CRON_ENTRY=* * * * * wget -O /dev/null http://nginx/cron.php
    labels:
      container_group: web

  kibana: # logs frontend
    image: kibana:4.5.4
    container_name: kibana
    ports:
      - 5601:5601
    labels:
      container_group: logging

  elasticsearch: # logs storage & full-text search
    image: elasticsearch:2.3.5
    container_name: elasticsearch
    ports:
      - 9200:9200
    labels:
      container_group: storage

  curator: # manage time-based indices
    image: bobrik/curator
    container_name: curator
    volumes:
      - ./curator/config/action-file.yml:/action-file.yml
      - ./curator/config/config.yml:/config.yml
    labels:
      container_group: monitoring

  redis_log: # dedicated for logging bridge
    image: redis:3.0.7
    container_name: redis_log
    ports:
      - 6379:6379
    labels:
      container_group: storage

  logstash: # forwards logs through Redis from logsprout to Elasticsearch
    image: logstash:2.3.4
    container_name: logstash
    command: 'logstash -f /logstash.conf -v'
    volumes:
      - ./logstash/config/logstash.conf:/logstash.conf
    labels:
      container_group: logging

  logspout: # aggregates logs from all containers and sends them to Redis
    image: rtoma/logspout-redis-logstash:0.1.8
    container_name: logspout
    command: 'redis://redis_log'
    environment:
      - DEBUG=true
      - REDIS_KEY=logstash
      - REDIS_DOCKER_HOST=magento
      #- REDIS_LOGSTASH_TYPE=docker
      - DEDOT_LABELS=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      container_group: logging
    depends_on:
      - redis_log

  nodeexporter: # forwards host metrics to Prometheus
    image: prom/node-exporter
    container_name: nodeexporter
    ports:
      - 9100:9100
    expose:
      - 9100
    restart: always
    labels:
      container_group: monitoring

  cadvisor: # forward container metrics to Prometheus
    image: google/cadvisor
    container_name: cadvisor
    ports:
      - 8080:8080
    expose:
      - 8080
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:rw"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
    restart: always
    labels:
      container_group: monitoring

  prometheus: # storage for search backend, gets all metrics from cAdvisor and Nodeexporter and prepares for Grafana
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    expose:
      - 9090
    volumes:
      #- ./prometheus/data:/prometheus
      - ./prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/config/rules:/etc/prometheus
    restart: always
    labels:
      container_group: monitoring
    command:
      - "-config.file=/etc/prometheus/prometheus.yml"
      - "-storage.local.path=/prometheus"
      - "-web.console.libraries=/etc/prometheus/console_libraries"
      - "-web.console.templates=/etc/prometheus/consoles"
      - "-web.listen-address=:9090"
      - "-alertmanager.url=http://alertmanager:9093"
      - "-storage.local.memory-chunks=300000"
      - "-storage.local.retention=744h"

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    expose:
      - 3000
    volumes:
      - ./grafana/data:/var/lib/grafana
    restart: always
    labels:
      container_group: monitoring
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  alertmanager: # forward metrics related to alerts to Prometheus
    image: prom/alertmanager
    container_name: alertmanager
    ports:
      - 9093:9093
    expose:
      - 9093
    restart: always
    volumes:
      - ./alertmanager/config:/etc/alertmanager/
      #- ./storage/alertmanager/:/alertmanager
    command:
      - '-config.file=/etc/alertmanager/config.yml'
      - '-storage.path=/tmp'
    labels:
      container_group: monitoring

  gitlab:
    image: gitlab/gitlab-ce:8.15.2-ce.0
    container_name: gitlab1
    restart: always
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab:7070'
    ports:
      - 7070:7070
      - 22:22
    volumes:
      - ./gitlab/config:/etc/gitlab
      - ./gitlab/logs:/var/log/gitlab
      - ./gitlab/data:/var/opt/gitlab

  gitlabrunner: # todo static ip for gitlab container and update toml
    image: gitlab/gitlab-runner:latest
    container_name: gitlabrunner1
    restart: always
    volumes:
      - ./gitlab-runner/config:/etc/gitlab-runner
      - ./var/run/docker.sock:/var/run/docker.sock

networks:
  default:
    driver: bridge
